#include "stdio.h"
#include "math.h"
#include "iostream"

using namespace std;

class lista{
	int *items;
	int tope;
	int cant;
	public:
	lista(int cant1=0):
	cant(cant1)
	{
		tope = -1;
		items=new int[cant];
	}
	int vacia(void)
	{ 
		return (tope == -1);
	}
	int insertar(int elem, int pos)
	{
		int i;
		pos--;
		if (tope < cant-1)
		{
				if (pos == tope+1)
				{
					items[++tope] = elem;
				}
				else 
				{
					if ((-1 < pos) && (pos <= tope))
					{
						for (i=tope; i != pos-1; i--)
						{
							items[i+1] = items[i];
						}
						items[pos] = elem;
						tope++;
					}
					else printf("Posicion incorrecta");
				}
		}
		else 
		{
			printf("Lista llena, imposible insertar mas elementos\n");
			return(0);
		}
	}
	
	int suprimir(int pos)
	{
		int i;
		pos--;
		if ((-1 < pos) && (pos <= tope))
		{
			if (pos == tope)
				tope--;
			else
			{
				for (i=pos; i != tope; i++)
					{
						items[i] = items[i+1];
					}
					tope--;
			}
		}
		else printf("Posicion incorrecta");
		return (0);
	}
	
	int primerElemento(void)
	{
		if (!vacia())
		{
			return items[0];
		}
		else return (0);
	}
	
	int ultimoElemento(void)
	{
		if (!vacia())
		{
			return items[tope];
		}
		else return (0);
	}
	
	int recuperar(int pos)
	{
		pos--;
		if ((-1 < pos) && (pos < cant))
		{
			return (items[pos]);
		}
		else return (0);
	}
	
	int buscar(int elem)
	{
		int i=0, j;
		if (!vacia())
		{
			while (i != tope+1)
			{
				if (items[i] == elem)
				{
					j = i;
					i = tope+1;
				}
				else i++;
			}
			if ( i == tope+1)
			{
				printf("El elemento ingresado no se encuentra en la lista");
				return(-1);
			}
			else return (j);
		}
		else return (-1);
	}
	
	int recorrer(void)
	{
		int i;
		if (!vacia())
		{
			for (i=0; i<tope+1; i++)
			{
				printf("%d\n", items[i]);
			}
		}
		else return (0);
	}
};

main ()
{
	lista a(5);
	int b;
	a.insertar(2,1);
	a.insertar(3,2);
	a.insertar(4,2);
	a.insertar(5,2);
	a.insertar(6,2);
	a.suprimir(2);
	a.recorrer();
}
